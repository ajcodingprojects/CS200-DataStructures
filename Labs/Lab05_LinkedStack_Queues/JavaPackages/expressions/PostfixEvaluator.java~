/**
 File PostfixEvaluator.java
 */
package expressions;

import java.util.*;

/**
 * Class that evaluates postfix expressions
 * 
 * @author A. Nerud, G. Peroutka
 * @version Oct 5, 2022
 */
public class PostfixEvaluator {
  
  /**
   * Method to evaluate a given postfix queue
   * 
   * @param postfixQueue a Queue<Token> that will be evaluated
   * 
   * @return the final int value of the end operation
   * @throws IllegalArgumentException if operators don't match properly with operands
   */
  public static int evaluate(Queue<Token> postfixQueue) {
    if (null == postfixQueue || postfixQueue.isEmpty()) 
      throw new IllegalArgumentException("Nothing to evaluate");
    
    while (!postfixQueue.isEmpty()) {
      if (postfixQueue.peek() instanceof Operator) {
        Operator op = (Operator)postfixQueue.remove();
        
        if (postfixQueue.isEmpty() || !(postfixQueue.peek() instanceof Operand)) 
          throw new IllegalArgumentException("Operator with no Operands");
        Operand operand1 = (Operand)postfixQueue.remove();
        
        if (postfixQueue.isEmpty() || !(postfixQueue.peek() instanceof Operand))
          throw new IllegalArgumentException("Operator with only one Operand");
        Operand operand2 = (Operand)postfixQueue.remove();
        
        postfixQueue.add(op.evaluate(operand1, operand2));
        
      } else {
        Token removed = postfixQueue.remove();
        if (!postfixQueue.isEmpty()) 
          throw new IllegalArgumentException("Too many operands");
        postfixQueue.add(removed);
        break; 
      }
    }
    return ((IntegerLiteral)postfixQueue.remove()).getValue();
  }
  
  
  
}